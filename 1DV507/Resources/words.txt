Computer programming History of programming
From Wikipedia the free encyclopedia 

The earliest known programmable machine that is a machine whose behavior can be controlled by changes to a program 
was AlJazaris programmable humanoid robot in  AlJazaris robot was originally a boat with four automatic musicians 
that floated on a lake to entertain guests at royal drinking parties His mechanism had a programmable drum machine with 
pegs cams that bump into little levers that operate the percussion The drummer could be made to play different rhythms 
and different drum patterns by moving the pegs to different locations Another sophisticated programmable machine by 
AlJazari was the castle clock

The Jacquard Loom developed in  is often quoted as a source of prior art The machine used a series of pasteboard 
cards with holes punched in them The hole pattern represented the pattern that the loom had to follow in weaving cloth 
The loom could produce entirely different weaves using different sets of cards The use of punched cards was also adopted 
by Charles Babbage around  to control his Analytical Engine

This innovation was later refined by Herman Hollerith who in  founded the Tabulating Machine Company which became IBM 
He invented the Hollerith punched card the card reader and the key punch machine These inventions were the foundation of 
the modern information processing industry The addition of a plugboard to his  Type I Tabulator allowed it to do 
different jobs without having to be rebuilt the first step toward programming By the late s there were a variety 
of plugboard programmable machines called unit record equipment to perform data processing tasks card reading 
The early computers were also programmed using plugboards
A box of punch cards with several program decks

The invention of the Von Neumann architecture allowed computer programs to be stored in computer memory Early programs 
had to be painstakingly crafted using the instructions of the particular machine often in binary notation Every model 
of computer would be likely to need different instructions to do the same task Later assembly languages were developed that 
let the programmer specify each instruction in a text format entering abbreviations for each operation code instead of a 
number and specifying addresses in symbolic form eg ADD X TOTAL In  Fortran the first higher level programming 
language was invented This allowed programmers to specify calculations by entering a formula directly 
eg Y  X  X   The program text or source was converted into machine instructions using a special program 
called a compiler Many other languages were developed including ones for commercial programming such as COBOL Programs 
were mostly still entered using punch cards or paper tape See computer programming in the punch card era By the late 
s data storage devices and computer terminals became inexpensive enough so programs could be created by typing directly 
into the computers Text editors were developed that allowed changes and corrections to be made much more easily than with 
punch cards

As time has progressed computers have made giant leaps in the area of processing power This has brought about newer 
programming languages that are more abstracted from the underlying hardware Although these more abstracted languages require 
additional overhead in most cases the huge increase in speed of modern computers has brought about little performance decrease 
compared to earlier counterparts The benefits of these more abstracted languages is that they allow both an easier learning 
curve for people less familiar with the older lowerlevel programming languages and they also allow a more experienced 
programmer to develop simple applications quickly Despite these benefits large complicated programs and programs that are 
more dependent on speed still require the faster and relatively lowerlevel languages with todays hardware The same concerns 
were raised about the original Fortran language

Throughout the second half of the twentieth century programming was an attractive career in most developed countries Some 
forms of programming have been increasingly subject to offshore outsourcing importing software and services from other countries 
usually at a lower wage making programming career decisions in developed countries more complicated while increasing economic 
opportunities in less developed areas It is unclear how far this trend will continue and how deeply it will impact programmer 
wages and opportunities
